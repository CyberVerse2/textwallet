'use client';

import { useState, useEffect, useMemo } from 'react';
import { Button } from '@/components/ui/button';
import { Tabs, TabsList, TabsTrigger } from '@/components/ui/tabs';
import TokenList from './token-list';
import ActivityList from './activity-list';
import {
  Wallet,
  Activity,
  Settings,
  LogOut,
  ChevronDown,
  ChevronUp,
  BarChart2,
  Power
} from 'lucide-react';

import type { NativeBalance } from './api/native-balances/route'; // Import NativeBalance type
import type { DisplayBalance, EnrichedTokenBalance } from './token-list';
import { isNativeBalance } from './token-list';

interface SidebarTabsProps {
  // Define any props if SidebarTabs receives them
}

export default function Sidebar() {
  return (
    <div className="w-80 flex flex-col">
      <div
        className="bg-white rounded-2xl overflow-hidden flex flex-col h-full"
        style={{ boxShadow: '8px 8px 0px 0px #000000' }}
      >
        <div className="p-6 border-b">
          <div className="flex items-center gap-3">
            <div
              className="h-10 w-10 rounded-full bg-yellow flex items-center justify-center text-2xl font-bold"
              style={{ boxShadow: '3px 3px 0px 0px #000000' }}
            >
              *
            </div>
            <span className="font-bold text-xl">Text Wallet</span>
          </div>
        </div>

        <SidebarTabs />
      </div>
    </div>
  );
}

function SidebarTabs({}: SidebarTabsProps) {
  const [activeTab, setActiveTab] = useState('assets');
  const [account, setAccount] = useState<string | null>(null);
  const [isConnecting, setIsConnecting] = useState(false);
  const [erc20TokenData, setErc20TokenData] = useState<EnrichedTokenBalance[]>([]);
  const [nativeTokenData, setNativeTokenData] = useState<NativeBalance[]>([]);
  const [totalValue, setTotalValue] = useState<number | null>(null);
  const [isLoadingTokens, setIsLoadingTokens] = useState(false);
  const [fetchError, setFetchError] = useState<string | null>(null);
  const [showAllTokens, setShowAllTokens] = useState(false);

  useEffect(() => {
    let isMounted = true; // Flag to prevent state updates on unmounted component
    if (account) {
      console.log('Fetching tokens for account:', account);
      setIsLoadingTokens(true);
      setFetchError(null);
      setErc20TokenData([]); // Clear previous ERC20 data
      setNativeTokenData([]); // Clear previous Native data

      // Fetch data when address changes
      const fetchData = async () => {
        // Only fetch if address is defined
        if (!account) {
          console.log('Address not available yet, skipping fetch.');
          setErc20TokenData([]); // Clear balances if address becomes undefined
          setNativeTokenData([]); // Clear balances if address becomes undefined
          setIsLoadingTokens(false);
          return;
        }

        // Fetch ERC20 tokens
        const fetchErc20 = fetch(`/api/tokens?address=${account}`).then(async (res) => {
          if (!res.ok) {
            const errorData = await res.json().catch(() => ({})); // Try to parse error JSON
            throw new Error(
              `ERC20 Fetch Error: ${res.status} ${res.statusText} - ${
                errorData.error || 'Unknown error'
              }`
            );
          }
          return res.json();
        });

        // Fetch Native ETH balances
        const fetchNative = fetch(`/api/native-balances?address=${account}`).then(async (res) => {
          if (!res.ok) {
            const errorData = await res.json().catch(() => ({})); // Try to parse error JSON
            throw new Error(
              `Native Fetch Error: ${res.status} ${res.statusText} - ${
                errorData.error || 'Unknown error'
              }`
            );
          }
          return res.json();
        });

        Promise.all([fetchErc20, fetchNative])
          .then(([erc20Result, nativeResult]) => {
            if (!isMounted) return; // Don't update state if component unmounted
            console.log('Fetched ERC20:', erc20Result);
            console.log('Received Native Balances Data:', nativeResult); // Log received native data
            setErc20TokenData(erc20Result.tokens || []);
            const nativeBalances = nativeResult || [];
            setNativeTokenData(nativeBalances); // nativeResult should be the array directly

            // Calculate total value including both ERC20 and Native balances
            const erc20Value = (erc20Result.tokens || []).reduce(
              (sum: number, token: EnrichedTokenBalance) => {
                return sum + (token.usdValue || 0);
              },
              0
            );

            const nativeValue = nativeBalances.reduce((sum: number, balance: NativeBalance) => {
              return sum + (balance.usdValue || 0); // Add native USD value
            }, 0);

            const totalCalculatedValue = erc20Value + nativeValue;
            setTotalValue(totalCalculatedValue);
          })
          .catch((error) => {
            if (!isMounted) return;
            console.error('Failed to fetch balances:', error);
            setFetchError(error.message || 'Failed to load token balances.');
            setTotalValue(null); // Reset total value on error
          })
          .finally(() => {
            if (isMounted) {
              setIsLoadingTokens(false);
            }
          });
      };
      fetchData();
    } else {
      // Clear data if no account
      setErc20TokenData([]);
      setNativeTokenData([]);
      setTotalValue(null);
      setIsLoadingTokens(false);
      setFetchError(null);
    }

    return () => {
      isMounted = false; // Cleanup function to set flag on unmount
    };
  }, [account]);

  // Combine and sort all balances for display
  const allBalances = useMemo(() => {
    const combined = [...nativeTokenData, ...erc20TokenData] as DisplayBalance[]; // Add type assertion

    // Sort combined list purely by USD value (descending)
    combined.sort((a: DisplayBalance, b: DisplayBalance) => {
      // Get USD values, treating null/undefined as -Infinity for sorting
      const valueA = a.usdValue ?? -Infinity;
      const valueB = b.usdValue ?? -Infinity;

      // Sort primarily by USD value descending
      if (valueB !== valueA) {
        return valueB - valueA;
      }

      // Fallback sorting: Native ETH first, then by symbol
      if (isNativeBalance(a) && !isNativeBalance(b)) return -1;
      if (!isNativeBalance(a) && isNativeBalance(b)) return 1;
      return (a.symbol || '').localeCompare(b.symbol || ''); // Sort by symbol ascending if values equal
    });
    return combined;
  }, [nativeTokenData, erc20TokenData]);

  // Determine which tokens to display based on the 'showAllTokens' state
  const displayTokens = useMemo(() => {
    return showAllTokens ? allBalances : allBalances.slice(0, 3);
  }, [allBalances, showAllTokens]);

  // Determine if the 'Show More' button should be visible
  const canShowMore = useMemo(() => {
    return allBalances.length > 3;
  }, [allBalances.length]);

  const connectWallet = async () => {
    if (window.ethereum) {
      try {
        setIsConnecting(true);
        const accounts = await window.ethereum.request({
          method: 'eth_requestAccounts'
        });
        setAccount(accounts[0]);
        setIsConnecting(false);
      } catch (error: any) {
        console.error('User denied account access', error);
        setIsConnecting(false);
      }
    } else {
      alert('No Ethereum provider found. Install MetaMask.');
    }
  };

  const formatAddress = (address: string) => {
    return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;
  };

  const disconnectWallet = () => {
    setAccount(null);
    // Optional: Add any other cleanup logic if needed, e.g., clearing local storage
  };

  return (
    <>
      <div className="flex border-b-2 border-black">
        <button
          className={`flex-1 py-3 font-bold text-center transition-all duration-200 relative ${
            activeTab === 'assets' ? '' : 'hover:bg-yellow/10'
          }`}
          onClick={() => setActiveTab('assets')}
          style={activeTab === 'assets' ? { boxShadow: 'inset 0px -2px 0px 0px #000000' } : {}}
        >
          <div className="flex items-center justify-center gap-2">
            <Wallet className="h-4 w-4" />
            <span>Assets</span>
          </div>
        </button>
        <button
          className={`flex-1 py-3 font-bold text-center transition-all duration-200 relative ${
            activeTab === 'activity' ? '' : 'hover:bg-yellow/10'
          }`}
          onClick={() => setActiveTab('activity')}
          style={activeTab === 'activity' ? { boxShadow: 'inset 0px -2px 0px 0px #000000' } : {}}
        >
          <div className="flex items-center justify-center gap-2">
            <Activity className="h-4 w-4" />
            <span>Activity</span>
          </div>
        </button>
      </div>

      <div className="flex-1">
        <div className="p-6">
          {/* Wallet Connection Section */}
          {account ? (
            <div
              className="bg-muted rounded-xl p-4 mb-6 border-2 border-black"
              style={{ boxShadow: '4px 4px 0px 0px #000000' }}
            >
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm font-semibold">Connected Wallet</span>
                <div className="h-2 w-2 rounded-full bg-green-500"></div>
              </div>
              <div className="text-sm text-muted-foreground truncate">{formatAddress(account)}</div>
            </div>
          ) : (
            <div className="flex flex-col items-center p-4 mb-6 rounded-xl border-2 border-dashed border-muted-foreground text-center">
              <Wallet className="h-8 w-8 mb-3 text-muted-foreground" />
              <p className="text-sm text-muted-foreground mb-3">
                Connect your wallet to view assets and activity.
              </p>
              <Button
                onClick={connectWallet}
                disabled={isConnecting}
                variant="outline"
                size="sm"
                className="gap-2 rounded-lg border-2 border-black bg-yellow text-black hover:bg-yellow-dark active:translate-y-px active:shadow-none transition-all duration-100 font-bold"
                style={{ boxShadow: '2px 2px 0px 0px #000000' }}
              >
                <Power className="h-4 w-4" />
                {isConnecting ? 'Connecting...' : 'Connect Wallet'}
              </Button>
            </div>
          )}

          {/* Tab Content */}
          {activeTab === 'assets' ? (
            <div className="flex flex-col h-full">
              {/* Assets Section Header */}
              <div className="flex items-center justify-between mb-4 px-1">
                <h3 className="font-bold text-lg flex items-center space-x-1">
                  <span>Assets</span>
                  {account && !isLoadingTokens && totalValue !== null && (
                    <span className="text-sm font-normal text-muted-foreground">
                      (${totalValue.toFixed(2)})
                    </span>
                  )}
                </h3>
                {/* Tab Selection */}
                <Tabs defaultValue="assets" className="w-full flex-grow" onValueChange={setActiveTab}>
                  <TabsList className="w-full grid grid-cols-2 h-12 p-0 bg-transparent border-b mb-6">
                    <TabsTrigger
                      value="assets"
                      className={`h-full data-[state=active]:text-black data-[state=active]:font-bold data-[state=active]:shadow-none data-[state=active]:border-b-2 data-[state=active]:border-black data-[state=active]:rounded-none data-[state=active]:bg-transparent`}
                    >
                      <Wallet className="mr-2 h-5 w-5" />
                      Assets
                    </TabsTrigger>
                    <TabsTrigger
                      value="activity"
                      className={`h-full data-[state=active]:text-black data-[state=active]:font-bold data-[state=active]:shadow-none data-[state=active]:border-b-2 data-[state=active]:border-black data-[state=active]:rounded-none data-[state=active]:bg-transparent`}
                    >
                      <Activity className="mr-2 h-5 w-5" />
                      Activity
                    </TabsTrigger>
                          >
                            <BarChart2 className="h-4 w-4" />
                          </Button>
                        </div>

                        {/* Error Message */}
                        {fetchError && <p className="text-red-500 text-sm mb-2 px-1">{fetchError}</p>}

                        {/* Custom Token Display Area */}
                        {isLoadingTokens ? (
                          <div className="animate-pulse flex items-center p-4 rounded-xl mb-4">
                            <div className="w-12 h-12 bg-blue-500 rounded-full mr-4"></div>
                            <div className="flex-grow">
                              <div className="h-5 bg-gray-200 rounded w-20 mb-2"></div>
                              <div className="h-4 bg-gray-200 rounded w-24"></div>
                            </div>
                            <div className="text-right">
                              <div className="h-5 bg-gray-200 rounded w-16 mb-2"></div>
                              <div className="h-4 bg-gray-200 rounded w-12"></div>
                            </div>
                          </div>
                        ) : nativeTokenData.length > 0 ? (
                          /* Display ETH with styling matching the image */
                          nativeTokenData.map((token) => (
                            <div key={`${token.networkName}-${token.symbol}`} className="flex items-center p-4 rounded-xl mb-4">
                              <div className="w-12 h-12 rounded-full bg-blue-500 flex items-center justify-center text-white mr-4">
                                <span className="text-xl font-bold">ETH</span>
                            {isLoadingTokens ? (
                              <div className="animate-pulse flex items-center p-4 rounded-xl mb-4">
                                <div className="w-12 h-12 bg-blue-500 rounded-full mr-4"></div>
                                <div className="flex-grow">
                                  <div className="h-5 bg-gray-200 rounded w-20 mb-2"></div>
                                  <div className="h-4 bg-gray-200 rounded w-24"></div>
                                </div>
                                <div className="text-right">
                                  <div className="h-5 bg-gray-200 rounded w-16 mb-2"></div>
                                  <div className="h-4 bg-gray-200 rounded w-12"></div>
                                </div>
                              </div>
                            ) : nativeTokenData.length > 0 ? (
                              /* Display ETH with styling matching the image */
                              nativeTokenData.map((token) => (
                                <div key={`${token.networkName}-${token.symbol}`} className="flex items-center p-4 rounded-xl mb-4">
                                  <div className="w-12 h-12 rounded-full bg-blue-500 flex items-center justify-center text-white mr-4">
                                    <span className="text-xl font-bold">ETH</span>
                                  </div>
                                  <div className="flex-grow">
                                    <div className="flex justify-between items-start">
                                      <div>
                                        <div className="flex items-center">
                                          <span className="text-xl font-bold mr-2">ETH</span>
                                          <span className="text-gray-500">(Base)</span>
                                        </div>
                                        <div className="text-gray-500">Native Balance</div>
                                      </div>
                                      <div className="text-right">
                                        <div className="text-xl font-bold">{Number(token.formattedBalance).toFixed(3)}</div>
                                        <div className="text-gray-500">${token.usdValue?.toFixed(2) || '0.00'}</div>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              ))
                            ) : (
                              <p className="text-center text-gray-500 py-4">No ETH balance found</p>
                            )}

                            {/* ERC20 tokens could be displayed here if needed */}
                            {!isLoadingTokens && erc20TokenData.length > 0 && showAllTokens && (
                              <div className="mt-4">
                                <TokenList tokens={erc20TokenData} />
                              </div>
                            )}
                          </div>

                          {/* Show Small Balances Button */}
                          <button 
                            onClick={() => setShowAllTokens(!showAllTokens)}
                            className="w-full py-4 px-6 bg-yellow-400 rounded-xl font-bold text-left flex items-center justify-between mb-4"
                          >
                            Show Small Balances
                            <ChevronDown className="h-5 w-5" />
                          </button>

                          {/* NFTs Section */}
                          <button 
                            className="w-full py-4 px-6 bg-yellow-400 rounded-xl font-bold text-left flex items-center justify-between mb-4"
                          >
                            <div className="flex items-center">
                              <svg className="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                              </svg>
                              NFTs
                            </div>
                            <ChevronDown className="h-5 w-5" />
                          </button>
                        </div>
                      ) : (
                        <div>
                          {/* Activity Section */}
                          <div className="flex items-center justify-between mb-4">
                            <h3 className="font-bold text-lg">Recent Activity</h3>

                            <Activity className="h-4 w-4" />
                          </div>
                          <ActivityList />
                        </div>
                      )
                    )
                  </div>
                </Tabs>
              </div>
            </div>
          )}

          {/* Settings & Disconnect */}
          <div className="pt-6 border-t-2 border-black mt-6">
            <Button
              variant="outline"
              className="w-full justify-start mb-2 border-2 border-black hover:bg-yellow/20 active:translate-y-px active:shadow-none transition-all duration-100 rounded-xl font-bold"
              style={{ boxShadow: '3px 3px 0px 0px #000000' }}
            >
              <Settings className="mr-2 h-4 w-4" />
              <span>Settings</span>
            </Button>
            {account && (
              <Button
                variant="outline"
                onClick={disconnectWallet} // onClick handler remains
                className="w-full justify-start text-red-500 border-2 border-red-500 hover:bg-red-50 active:translate-y-px active:shadow-none transition-all duration-100 rounded-xl font-bold"
                style={{ boxShadow: '3px 3px 0px 0px #000000' }}
              >
                <LogOut className="mr-2 h-4 w-4" />
                <span>Disconnect</span>
              </Button>
            )}
          </div>
        </div>
      </div>
    </>
  );
}
